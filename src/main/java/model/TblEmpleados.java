package model;
// Generated 09-mar-2018 12:34:10 by Hibernate Tools 4.3.1

import java.util.*;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.*;
import org.hibernate.*;

/**TblEmpleados generated by hbm2java */
@Entity
@Table(name = "tbl_Empleados")
public class TblEmpleados implements java.io.Serializable, Crud {

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "Empleado_Id", unique = true, nullable = false)
    private Integer empleadoId;
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "Empleado_IdPuesto")
    private TblPuestos tblPuestos;
    
    @Column(name = "Empleado_Num")
    private String empleadoNum;
    @Column(name = "Empleado_Nombre")
    private String empleadoNombre;
    @Column(name = "Empleado_Apellidos")
    private String empleadoApellidos;
    @Column(name = "Empleado_Email")
    private String empleadoEmail;
    @Column(name = "Empleado_Telefono")
    private String empleadoTelefono;
    @Column(name = "UserName", length = 10)
    private String userName;
    @Column(name = "UserPsw", length = 10)
    private String userPsw;
    
//    @OneToMany(targetEntity =TblBitaMov.class,fetch = FetchType.LAZY, mappedBy = "tblEmpleados")
//    private Set tblBitaMovs = new HashSet(0);
    
    @OneToMany(targetEntity =BitaReparacion.class,fetch = FetchType.EAGER, mappedBy = "tblEmpleados")
    private Set bitaReparacions = new HashSet(0);

    public TblEmpleados() {
    }

    public TblEmpleados(TblPuestos tblPuestos, String empleadoNum, String empleadoNombre, String empleadoApellidos, String empleadoEmail, String empleadoTelefono, String userName, String userPsw, Set tblBitaMovs, Set bitaReparacions) {
        this.tblPuestos = tblPuestos;
        this.empleadoNum = empleadoNum;
        this.empleadoNombre = empleadoNombre;
        this.empleadoApellidos = empleadoApellidos;
        this.empleadoEmail = empleadoEmail;
        this.empleadoTelefono = empleadoTelefono;
        this.userName = userName;
        this.userPsw = userPsw;
        //this.tblBitaMovs = tblBitaMovs;
        this.bitaReparacions = bitaReparacions;
    }

    
    public Integer getEmpleadoId() { return this.empleadoId; }

    public void setEmpleadoId(Integer empleadoId) { this.empleadoId = empleadoId; }

    public TblPuestos getTblPuestos() { return this.tblPuestos; }

    public void setTblPuestos(TblPuestos tblPuestos) { this.tblPuestos = tblPuestos; }

    public String getEmpleadoNum() { return this.empleadoNum; }

    public void setEmpleadoNum(String empleadoNum) { this.empleadoNum = empleadoNum; }

    public String getEmpleadoNombre() { return this.empleadoNombre; }

    public void setEmpleadoNombre(String empleadoNombre) { this.empleadoNombre = empleadoNombre; }

    public String getEmpleadoApellidos() { return this.empleadoApellidos; }

    public void setEmpleadoApellidos(String empleadoApellidos) { this.empleadoApellidos = empleadoApellidos; }

    public String getEmpleadoEmail() { return this.empleadoEmail; }

    public void setEmpleadoEmail(String empleadoEmail) { this.empleadoEmail = empleadoEmail; }

    public String getEmpleadoTelefono() { return this.empleadoTelefono; }

    public void setEmpleadoTelefono(String empleadoTelefono) { this.empleadoTelefono = empleadoTelefono; }

    public String getUserName() { return this.userName; }

    public void setUserName(String userName) { this.userName = userName; }

    public String getUserPsw() {  return this.userPsw; }

    public void setUserPsw(String userPsw) { this.userPsw = userPsw; }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 53 * hash + Objects.hashCode(this.empleadoId);
        hash = 53 * hash + Objects.hashCode(this.tblPuestos);
        hash = 53 * hash + Objects.hashCode(this.empleadoNum);
        hash = 53 * hash + Objects.hashCode(this.empleadoNombre);
        hash = 53 * hash + Objects.hashCode(this.empleadoApellidos);
        hash = 53 * hash + Objects.hashCode(this.empleadoEmail);
        hash = 53 * hash + Objects.hashCode(this.empleadoTelefono);
        hash = 53 * hash + Objects.hashCode(this.userName);
        hash = 53 * hash + Objects.hashCode(this.userPsw);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final TblEmpleados other = (TblEmpleados) obj;
        if (!Objects.equals(this.empleadoNum, other.empleadoNum)) {
            return false;
        }
        if (!Objects.equals(this.empleadoNombre, other.empleadoNombre)) {
            return false;
        }
        if (!Objects.equals(this.empleadoApellidos, other.empleadoApellidos)) {
            return false;
        }
        if (!Objects.equals(this.empleadoEmail, other.empleadoEmail)) {
            return false;
        }
        if (!Objects.equals(this.empleadoTelefono, other.empleadoTelefono)) {
            return false;
        }
        if (!Objects.equals(this.userName, other.userName)) {
            return false;
        }
        if (!Objects.equals(this.userPsw, other.userPsw)) {
            return false;
        }
        if (!Objects.equals(this.empleadoId, other.empleadoId)) {
            return false;
        }
        if (!Objects.equals(this.tblPuestos, other.tblPuestos)) {
            return false;
        }
        return true;
    }

//    public Set getTblBitaMovs() { return this.tblBitaMovs; }
//    public void setTblBitaMovs(Set tblBitaMovs) { this.tblBitaMovs = tblBitaMovs; }

    public Set getBitaReparacions() { return this.bitaReparacions; }

    public void setBitaReparacions(Set bitaReparacions) { this.bitaReparacions = bitaReparacions; }
   
    public static List<TblEmpleados> selectAll(){
        Session sesion= HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();
        //List<TblEmpleados> lista= sesion.createQuery("from TblEmpleados e left join fetch e.tblPuestos").list();
        List<TblEmpleados> lista= sesion.createQuery("from TblEmpleados").list();
        sesion.getTransaction().commit();
        return lista;
    }
    
    public static List<TblEmpleados> selectAllP(Integer offset, Integer noOfRecords){
        Session sesion= HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();
        Criteria criteria=sesion.createCriteria(TblEmpleados.class).setFirstResult(offset).setMaxResults(noOfRecords);
        List<TblEmpleados> lista= criteria.list();
        sesion.getTransaction().commit();
        return lista;
    }
    
    public static List<TblEmpleados> selectxPuesto(Integer Id){
        Session sesion=HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();        
        org.hibernate.Query sql= sesion.createQuery("from TblEmpleados t where t.tblPuestos=:criteria");
        sql.setInteger("criteria", Id);
        List<TblEmpleados> lista=sql.list();
        sesion.getTransaction().commit();
        return lista;
    }
    
    public static List<TblEmpleados> selectPuestos(){
        Session sesion=HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();
        List<TblEmpleados> lista= sesion.createQuery("select distinct e.tblPuestos from TblEmpleados e").list();
        sesion.getTransaction().commit();
        return lista;
    }
    
    public static TblEmpleados buscarxClave(Integer Id){
        Session sesion= HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();
        TblEmpleados e= sesion.get(TblEmpleados.class, Id);
        sesion.getTransaction().commit();
        return e;
    }

    @Override
    public void insert() {
        Session sesion=HibernateHelper.getSessionFactory().openSession();
        sesion.getTransaction().begin();
        sesion.saveOrUpdate(this);
        sesion.getTransaction().commit();
    }

    @Override
    public void delete() {
        Session sesion=HibernateHelper.getSessionFactory().openSession();
        sesion.beginTransaction();
        sesion.delete(this);
        sesion.getTransaction().commit();
    }
}